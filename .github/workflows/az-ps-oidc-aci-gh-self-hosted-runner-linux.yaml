name: Microsoft Azure PS - OIDC ACI GH self hosted runner linux
on:
  workflow_dispatch:
    inputs: 
      ENVIRONMENT: 
        description: 'Environment Name'
        required: true
        default: preprod
      AZURE_APP_NAME: 
        description: 'App Name'
        required: true
        default: alpha-app
      AZURE_APP_NAME: 
        description: 'App Name'
        required: true
        default: alpha-app
      AZURE_APP_NAME: 
        description: 'App Name'
        required: true
        default: alpha-app
env:
  RUNNER_VERSION: 2.293.0
  ACI_RESOURCE_GROUP: "POC-ACI-GitHub-Runners-RG"
  ACI_NAME: "gh-runner-linux-01"
  DNS_NAME_LABEL: "gh-lin-01"
  GH_OWNER: "HomeAidePi-Alpha"
  GH_REPOSITORY: "feitss-az-ps-aci-gh-self-hosted-runner-linux" #TODO Change here to deploy self hosted runner ACI to another repo.

permissions:
  contents: 'read'
  id-token: 'write'
  
jobs:
  provision:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    steps:
      # Checkout the Repo
      - uses: actions/checkout@v3
      
      # Login to Azure with PS with Federated with Github
      - name: 'Az PS Login via OIDC'
        uses: azure/login@v1.4.0
        with:
          client-id: ${{ inputs.AZURE_AD_CLIENT_ID }}
          tenant-id: ${{ inputs.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ inputs.AZURE_SUBSCRIPTION_ID }}

      - run: |
          ./.github/workflows/azure/ps/oidc/aci/gh-self-hosted-runner/provision/Provision-RBAC-ACR.ps1
          ./.github/workflows/azure/ps/oidc/aci/gh-self-hosted-runner/provision/Provision-RBAC-ACI.ps1
        shell: pwsh 

      - name: "Build GitHub Runner container image"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build -f .github/workflows/azure/ps/oidc/aci/gh-self-hosted-runner/dockerfile --build-arg RUNNER_VERSION=${{ env.RUNNER_VERSION }} -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/az-ps-aci-gh-self-hosted-runner:${{ env.RUNNER_VERSION }} .

      - name: "Push container image to ACR"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/az-ps-aci-gh-self-hosted-runner:${{ env.RUNNER_VERSION }}

  test:
    runs-on: [self-hosted]
    needs: [provision]
    steps:
    - uses: actions/checkout@v2
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
    - name: Display Terraform Version
      run: terraform --version
    - name: Display Azure-CLI Version
      run: az --version
  
  deploy:
    needs: [provision,test]
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    steps:
    # Checkout the Repo
    - uses: actions/checkout@v3
    
    # Login to Azure with PS with Federated with Github
      - name: 'Az PS Login via OIDC'
        uses: azure/login@v1.4.0
        with:
          client-id: ${{ inputs.AZURE_AD_CLIENT_ID }}
          tenant-id: ${{ inputs.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ inputs.AZURE_SUBSCRIPTION_ID }}

      - run: |
          ./.github/workflows/azure/ps/oidc/aci/gh-self-hosted-runner/deploy/Deploy-ACR.ps1
          ./.github/workflows/azure/ps/oidc/aci/gh-self-hosted-runner/deploy/Deploy-ACI.ps1
        shell: pwsh 

    - name: 'Deploy to Azure Container Instances'
      uses: 'azure/aci-deploy@v1'
      with:
        resource-group: ${{ env.ACI_RESOURCE_GROUP }}
        image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/az-ps-aci-gh-self-hosted-runner:${{ env.RUNNER_VERSION }}
        registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        name: ${{ env.ACI_NAME }}
        dns-name-label: ${{ env.DNS_NAME_LABEL }}
        environment-variables: GH_TOKEN=${{ secrets.PAT_TOKEN }} GH_OWNER=${{ env.GH_OWNER }} GH_REPOSITORY=${{ env.GH_REPOSITORY }}
        location: 'eastus2'
        OS-type: 'Linux'

  chatops:
    name: Send notifications with Teams
    needs: [login-oidc]
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    steps:
          # Send Chat Ops notification
      - name: Send chat ops notification to teams
        uses: dhollerbach/actions.send-message-to-ms-teams@1.0.10
        with:
          webhook: ${{ secrets.TEAMS_WEBHOOK }}
          message: 'Deployment Completed for commit: ${{ github.sha }} check logs to determine success.'
 